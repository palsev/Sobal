var l=Object.defineProperty;var d=(t,o,e)=>o in t?l(t,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[o]=e;var i=(t,o,e)=>(d(t,typeof o!="symbol"?o+"":o,e),e);import{af as u,ag as h}from"./connector-d867b6ec.js";import"./runtime-core.esm-bundler-24a2b16f.js";import"./_commonjsHelpers-87174ba5.js";import"./pools-b19f9d28.js";const M=["isRabby","isBraveWallet","isTrustWallet","isLedgerConnect"],g=()=>{var t;return Boolean(((t=window.ethereum)==null?void 0:t.isMetaMask)&&!M.some(o=>{var e;return(e=window.ethereum)==null?void 0:e[o]}))};function c(){var e,s;const t=window.ethereum;let o=t||((e=window.web3)==null?void 0:e.currentProvider);return(s=t==null?void 0:t.providers)!=null&&s.length&&t.providers.forEach(a=>{a.isMetaMask&&(o=a)}),o}function I(){return!!c()}class f extends u{constructor(){super(...arguments);i(this,"id",h.InjectedMetaMask)}async connect(){const e=c();let s=!1;if(e){this.provider=e,this.active.value=!0;let a=null,r=null;try{e.request&&(a=await e.request({method:"eth_requestAccounts"}),r=await e.request({method:"eth_chainId"}))}catch(n){n.code===4001?(s=!0,console.log("Please connect to MetaMask.")):console.error(n)}if(!a&&!s){const n=await e.enable();a=(n==null?void 0:n.result)||n}a&&r&&(this.handleChainChanged(r),this.handleAccountsChanged(a))}else console.error("Tried to connect to MetaMask but it was not detected. Please install MetaMask.");return{provider:e,account:this.account,chainId:this.chainId}}}const C=typeof f;export{f as MetamaskConnector,C as MetamaskConnectorType,c as getInjectedProvider,g as getIsMetaMaskWallet,I as hasInjectedProvider};
//# sourceMappingURL=metamask.connector-ad3cfd34.js.map
